// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      Role     @default(AUDITOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions  Transaction[]
  inventoryLogs InventoryLog[]
  audits        Audit[]

  @@map("users")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  items Item[]

  @@map("categories")
}

model Supplier {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  contactPerson String?
  phone         String?
  address       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  items Item[]

  @@map("suppliers")
}

model Item {
  id            Int      @id @default(autoincrement())
  name          String
  categoryId    Int
  quantity      Int      @default(0)
  unit          String
  purchasePrice Float
  sellingPrice  Float?
  supplierId    Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  category      Category       @relation(fields: [categoryId], references: [id])
  supplier      Supplier?      @relation(fields: [supplierId], references: [id])
  transactions  Transaction[]
  inventoryLogs InventoryLog[]
  audits        Audit[]

  @@map("items")
}

model Transaction {
  id              Int             @id @default(autoincrement())
  transactionType TransactionType
  itemId          Int
  quantity        Int
  transactionDate DateTime
  userId          Int
  notes           String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  item Item @relation(fields: [itemId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model InventoryLog {
  id             Int      @id @default(autoincrement())
  itemId         Int
  beforeQuantity Int
  changeQuantity Int
  afterQuantity  Int
  userId         Int
  logDate        DateTime
  createdAt      DateTime @default(now())

  item Item @relation(fields: [itemId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("inventory_logs")
}

model Location {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("locations")
}

model Audit {
  id               Int      @id @default(autoincrement())
  itemId           Int
  expectedQuantity Int
  actualQuantity   Int
  difference       Int
  auditDate        DateTime
  userId           Int
  notes            String?
  createdAt        DateTime @default(now())

  item Item @relation(fields: [itemId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("audits")
}

enum Role {
  ADMIN
  AUDITOR
}

enum TransactionType {
  IN
  OUT
}
